// –ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –æ—Ç Telegram –±–æ—Ç–∞
const express = require('express');
const axios = require('axios');
const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
const BOT_TOKEN = '8195455030:AAG6-zvkYu3r4s0LVBXQgWNwS7qyuNluGJ0';
const WEB_APP_URL = process.env.WEB_APP_URL || 'https://your-app-url.com';
const BOT_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
async function getBotInfo() {
  try {
    const response = await axios.get(`${BOT_API_URL}/getMe`);
    console.log('Bot info:', response.data);
    return response.data;
  } catch (error) {
    console.error('Error getting bot info:', error.message);
    return null;
  }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendMessage(chatId, text, options = {}) {
  try {
    const payload = {
      chat_id: chatId,
      text,
      ...options
    };

    const response = await axios.post(`${BOT_API_URL}/sendMessage`, payload);
    return response.data;
  } catch (error) {
    console.error('Error sending message:', error.message);
    return null;
  }
}

// –°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function createAuthKeyboard() {
  return {
    inline_keyboard: [
      [
        {
          text: 'üöÄ –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: {
            url: WEB_APP_URL
          }
        }
      ],
      [
        {
          text: 'üìã –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
          callback_data: 'enter_promo_code'
        }
      ]
    ]
  };
}

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start
async function handleStartCommand(chatId, user) {
  const text = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!</b>

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

‚Ä¢ <b>–í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
‚Ä¢ <b>–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥</b> - –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞

–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!
  `.trim();

  const keyboard = createAuthKeyboard();
  
  await sendMessage(chatId, text, {
    reply_markup: keyboard,
    parse_mode: 'HTML'
  });
}

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query
async function handleCallbackQuery(callbackQuery) {
  const { id, data, from } = callbackQuery;
  const chatId = from.id;

  try {
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    await axios.post(`${BOT_API_URL}/answerCallbackQuery`, {
      callback_query_id: id
    });

    if (data === 'enter_promo_code') {
      const text = `
üìã <b>–í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>

–î–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
2. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.
      `.trim();

      await sendMessage(chatId, text, {
        parse_mode: 'HTML'
      });
    }
  } catch (error) {
    console.error('Error handling callback query:', error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleMessage(message) {
  const { chat, text, from } = message;
  const chatId = chat.id;

  console.log('Received message:', { chatId, text, from: from.username });

  if (text === '/start') {
    await handleStartCommand(chatId, from);
  } else {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await handleStartCommand(chatId, from);
  }
}

// Webhook endpoint
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    console.log('Received update:', JSON.stringify(update, null, 2));

    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query);
    }

    res.status(200).json({ ok: true });
  } catch (error) {
    console.error('Error processing webhook:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
app.get('/bot-info', async (req, res) => {
  const botInfo = await getBotInfo();
  res.json(botInfo);
});

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook
app.post('/set-webhook', async (req, res) => {
  try {
    const webhookUrl = req.body.url || `${process.env.WEBHOOK_URL}/webhook`;
    
    const response = await axios.post(`${BOT_API_URL}/setWebhook`, {
      url: webhookUrl
    });

    console.log('Webhook set:', response.data);
    res.json(response.data);
  } catch (error) {
    console.error('Error setting webhook:', error.message);
    res.status(500).json({ error: error.message });
  }
});

// –£–¥–∞–ª–∏—Ç—å webhook
app.post('/delete-webhook', async (req, res) => {
  try {
    const response = await axios.post(`${BOT_API_URL}/deleteWebhook`);
    console.log('Webhook deleted:', response.data);
    res.json(response.data);
  } catch (error) {
    console.error('Error deleting webhook:', error.message);
    res.status(500).json({ error: error.message });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`Telegram bot server running on port ${PORT}`);
  console.log(`Web App URL: ${WEB_APP_URL}`);
  console.log(`Bot API URL: ${BOT_API_URL}`);
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  getBotInfo();
});

module.exports = app;
