// Telegram Bot API service for referral system

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
}

interface TelegramWebAppData {
  user?: TelegramUser;
  auth_date: number;
  hash: string;
}

interface BotResponse<T = any> {
  ok: boolean;
  result?: T;
  error_code?: number;
  description?: string;
}

class TelegramBotService {
  private botToken: string;
  private baseUrl: string;

  constructor() {
    this.botToken = '8195455030:AAG6-zvkYu3r4s0LVBXQgWNwS7qyuNluGJ0';
    this.baseUrl = `https://api.telegram.org/bot${this.botToken}`;
    
    console.log('TelegramBotService initialized with token:', this.botToken.substring(0, 10) + '...');
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
  async getBotInfo(): Promise<BotResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/getMe`);
      const data = await response.json();
      
      console.log('Bot info response:', data);
      return data;
    } catch (error) {
      console.error('Error getting bot info:', error);
      return { ok: false, description: 'Failed to get bot info' };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendMessage(chatId: number, text: string, options?: {
    parse_mode?: 'HTML' | 'Markdown' | 'MarkdownV2';
    reply_markup?: any;
    disable_web_page_preview?: boolean;
  }): Promise<BotResponse> {
    try {
      const payload = {
        chat_id: chatId,
        text,
        ...options
      };

      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      const data = await response.json();
      console.log('Send message response:', data);
      return data;
    } catch (error) {
      console.error('Error sending message:', error);
      return { ok: false, description: 'Failed to send message' };
    }
  }

  // –°–æ–∑–¥–∞—Ç—å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  createAuthKeyboard(webAppUrl: string) {
    return {
      inline_keyboard: [
        [
          {
            text: 'üöÄ –í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: {
              url: webAppUrl
            }
          }
        ],
        [
          {
            text: 'üìã –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥',
            callback_data: 'enter_promo_code'
          }
        ]
      ]
    };
  }

  // –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  createPromoCodeKeyboard() {
    return {
      inline_keyboard: [
        [
          {
            text: '‚úÖ –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥',
            callback_data: 'has_promo_code'
          }
        ],
        [
          {
            text: 'üÜï –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram',
            callback_data: 'telegram_auth'
          }
        ]
      ]
    };
  }

  // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback query
  async answerCallbackQuery(callbackQueryId: string, text?: string, showAlert?: boolean): Promise<BotResponse> {
    try {
      const payload = {
        callback_query_id: callbackQueryId,
        text,
        show_alert: showAlert || false
      };

      const response = await fetch(`${this.baseUrl}/answerCallbackQuery`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error answering callback query:', error);
      return { ok: false, description: 'Failed to answer callback query' };
    }
  }

  // –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Web App
  validateWebAppData(initData: string): TelegramWebAppData | null {
    try {
      const params = new URLSearchParams(initData);
      const userParam = params.get('user');
      
      if (!userParam) {
        console.error('No user data in initData');
        return null;
      }

      const user = JSON.parse(userParam);
      const authDate = parseInt(params.get('auth_date') || '0');
      const hash = params.get('hash') || '';

      return {
        user,
        auth_date: authDate,
        hash
      };
    } catch (error) {
      console.error('Error validating Web App data:', error);
      return null;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞
  async isUserAdmin(chatId: number, userId: number): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/getChatMember?chat_id=${chatId}&user_id=${userId}`);
      const data = await response.json();
      
      if (data.ok && data.result) {
        const status = data.result.status;
        return status === 'creator' || status === 'administrator';
      }
      
      return false;
    } catch (error) {
      console.error('Error checking admin status:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
  async getChat(chatId: number): Promise<BotResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/getChat?chat_id=${chatId}`);
      const data = await response.json();
      
      return data;
    } catch (error) {
      console.error('Error getting chat info:', error);
      return { ok: false, description: 'Failed to get chat info' };
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π Web App
  async sendWebAppMessage(chatId: number, text: string, webAppUrl: string): Promise<BotResponse> {
    const keyboard = this.createAuthKeyboard(webAppUrl);
    
    return this.sendMessage(chatId, text, {
      reply_markup: keyboard,
      parse_mode: 'HTML'
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
  async sendWelcomeMessage(chatId: number, webAppUrl: string): Promise<BotResponse> {
    const text = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!</b>

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

‚Ä¢ <b>–í–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</b> - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
‚Ä¢ <b>–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥</b> - –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –ø–∞—Ä—Ç–Ω–µ—Ä–∞

–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!
    `.trim();

    return this.sendWebAppMessage(chatId, text, webAppUrl);
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async sendPromoCodeMessage(chatId: number, promoCode: string, username?: string): Promise<BotResponse> {
    const text = `
üéä <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>

–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>${promoCode}</code>

${username ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @${username}` : ''}

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∫–æ–º–∏—Å—Å–∏—é —Å –∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π!
    `.trim();

    return this.sendMessage(chatId, text, {
      parse_mode: 'HTML'
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  async sendRegistrationNotification(chatId: number, newUserInfo: {
    username?: string;
    firstName: string;
    promoCode: string;
  }): Promise<BotResponse> {
    const text = `
üéâ <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${newUserInfo.firstName}${newUserInfo.username ? ` (@${newUserInfo.username})` : ''}
–ü—Ä–æ–º–æ–∫–æ–¥: <code>${newUserInfo.promoCode}</code>

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫–æ–º–∏—Å—Å–∏—é —Å –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!
    `.trim();

    return this.sendMessage(chatId, text, {
      parse_mode: 'HTML'
    });
  }
}

export const telegramBotService = new TelegramBotService();
export type { TelegramUser, TelegramWebAppData, BotResponse };
