import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { TelegramUser } from "@/types/telegram";

interface TestModeViewProps {
  onUserSet: (user: TelegramUser) => void;
  onCancel: () => void;
}

const TestModeView = ({ onUserSet, onCancel }: TestModeViewProps) => {
  const [testUser, setTestUser] = useState<TelegramUser>({
    id: 123456789,
    first_name: 'Test',
    last_name: 'User',
    username: 'testuser',
    language_code: 'ru'
  });

  const handleSetUser = () => {
    onUserSet(testUser);
  };

  const handleRandomUser = () => {
    const randomId = Math.floor(Math.random() * 1000000000);
    const names = ['–ê–ª–µ–∫—Å–µ–π', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–°–µ—Ä–≥–µ–π', '–ï–ª–µ–Ω–∞'];
    const surnames = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤–∞', '–°–∏–¥–æ—Ä–æ–≤', '–ö–æ–∑–ª–æ–≤–∞', '–°–º–∏—Ä–Ω–æ–≤', '–í–∞—Å–∏–ª—å–µ–≤–∞'];
    const usernames = ['alexey123', 'maria_k', 'dmitry_s', 'anna_p', 'sergey_m', 'elena_v'];
    
    const randomName = names[Math.floor(Math.random() * names.length)];
    const randomSurname = surnames[Math.floor(Math.random() * surnames.length)];
    const randomUsername = usernames[Math.floor(Math.random() * usernames.length)];
    
    setTestUser({
      id: randomId,
      first_name: randomName,
      last_name: randomSurname,
      username: randomUsername,
      language_code: 'ru'
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-md mx-auto pt-20">
        <Card>
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold text-gray-800">
              üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            </CardTitle>
            <CardDescription>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            
            <div className="space-y-3">
              <div>
                <label className="text-sm font-medium">Telegram ID</label>
                <Input
                  type="number"
                  value={testUser.id}
                  onChange={(e) => setTestUser(prev => ({ ...prev, id: parseInt(e.target.value) || 0 }))}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">–ò–º—è</label>
                <Input
                  value={testUser.first_name}
                  onChange={(e) => setTestUser(prev => ({ ...prev, first_name: e.target.value }))}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">–§–∞–º–∏–ª–∏—è</label>
                <Input
                  value={testUser.last_name || ''}
                  onChange={(e) => setTestUser(prev => ({ ...prev, last_name: e.target.value }))}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">Username</label>
                <Input
                  value={testUser.username || ''}
                  onChange={(e) => setTestUser(prev => ({ ...prev, username: e.target.value }))}
                />
              </div>
              
              <div>
                <label className="text-sm font-medium">–Ø–∑—ã–∫</label>
                <Input
                  value={testUser.language_code || ''}
                  onChange={(e) => setTestUser(prev => ({ ...prev, language_code: e.target.value }))}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Button 
                onClick={handleSetUser}
                className="w-full bg-blue-600 hover:bg-blue-700"
              >
                –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              </Button>
              
              <Button 
                onClick={handleRandomUser}
                variant="outline"
                className="w-full"
              >
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              </Button>
              
              <Button 
                onClick={onCancel}
                variant="ghost"
                className="w-full"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>

            <div className="text-xs text-gray-500 text-center">
              <p>üí° –≠—Ç–æ—Ç —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</p>
              <p>–í —Ä–µ–∞–ª—å–Ω–æ–º Telegram –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default TestModeView;
