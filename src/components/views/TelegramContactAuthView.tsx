import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { useTelegramWebApp } from "@/hooks/useTelegramWebApp";
import { TelegramUser } from "@/types/telegram";

interface TelegramContactAuthViewProps {
  onAuthSuccess: (user: TelegramUser) => void;
  onCancel: () => void;
}

const TelegramContactAuthView = ({ onAuthSuccess, onCancel }: TelegramContactAuthViewProps) => {
  const { 
    user, 
    isReady, 
    webApp, 
    hapticFeedback, 
    showAlert, 
    showConfirm,
    mainButton,
    backButton 
  } = useTelegramWebApp();

  const [isRequestingContact, setIsRequestingContact] = useState(false);
  const [contactGranted, setContactGranted] = useState(false);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram Web App
  useEffect(() => {
    if (isReady && webApp) {
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
      mainButton.setText("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
      mainButton.show();
      mainButton.enable();
      
      mainButton.onClick(() => {
        requestContact();
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      backButton.show();
      backButton.onClick(() => {
        handleCancel();
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user) {
        setContactGranted(true);
        mainButton.setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é");
        mainButton.onClick(() => {
          handleConfirmAuth();
        });
      }
    }

    return () => {
      if (mainButton) {
        mainButton.hide();
      }
      if (backButton) {
        backButton.hide();
      }
    };
  }, [isReady, webApp, user, mainButton, backButton]);

  const requestContact = () => {
    if (!webApp) {
      showAlert("Telegram Web App –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.");
      return;
    }

    setIsRequestingContact(true);
    hapticFeedback.impactOccurred('medium');

    console.log('Requesting contact from Telegram...');
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —á–µ—Ä–µ–∑ Telegram
    webApp.requestContact((granted) => {
      console.log('Contact access granted:', granted);
      
      if (granted) {
        // –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = webApp.initDataUnsafe?.user;
        
        if (userData) {
          setContactGranted(true);
          setUser(userData);
          hapticFeedback.notificationOccurred('success');
          showAlert("–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω! –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", () => {
            mainButton.setText("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é");
            mainButton.onClick(() => {
              handleConfirmAuth();
            });
          });
        } else {
          hapticFeedback.notificationOccurred('error');
          showAlert("–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.");
        }
      } else {
        hapticFeedback.notificationOccurred('error');
        showAlert("–î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É.");
      }
      
      setIsRequestingContact(false);
    });
  };

  const handleConfirmAuth = () => {
    if (!user) {
      hapticFeedback.notificationOccurred('error');
      showAlert("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
      return;
    }

    hapticFeedback.impactOccurred('heavy');
    
    showConfirm(
      `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.first_name}${user.username ? ` (@${user.username})` : ''}?`,
      (confirmed) => {
        if (confirmed) {
          hapticFeedback.notificationOccurred('success');
          onAuthSuccess(user);
        }
      }
    );
  };

  const handleCancel = () => {
    hapticFeedback.impactOccurred('light');
    onCancel();
  };

  if (!isReady) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 flex items-center justify-center">
        <Card className="max-w-md w-full">
          <CardContent className="pt-6">
            <div className="text-center">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App...</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-md mx-auto pt-20">
        <Card>
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-bold text-gray-800">
              üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
            </CardTitle>
            <CardDescription>
              –î–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            
            {/* –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
            <div className="text-center">
              {contactGranted && user ? (
                <div className="space-y-4">
                  <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                    <span className="text-2xl">‚úÖ</span>
                  </div>
                  <div>
                    <p className="font-semibold text-green-800">–ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω</p>
                    <p className="text-sm text-gray-600">
                      {user.first_name} {user.last_name || ''}
                    </p>
                    {user.username && (
                      <p className="text-sm text-blue-600">@{user.username}</p>
                    )}
                    <p className="text-xs text-gray-500">ID: {user.id}</p>
                  </div>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto">
                    <span className="text-2xl">üì±</span>
                  </div>
                  <div>
                    <p className="font-semibold text-orange-800">–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É</p>
                    <p className="text-sm text-gray-600">
                      –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ Telegram
                    </p>
                  </div>
                </div>
              )}
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="font-semibold text-blue-800 mb-2">–ß—Ç–æ –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º:</h4>
              <ul className="text-sm text-blue-700 space-y-1">
                <li>‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
                <li>‚Ä¢ –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram</li>
                <li>‚Ä¢ Username –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º</li>
                <li>‚Ä¢ Telegram ID –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ</li>
              </ul>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="space-y-3">
              {!contactGranted ? (
                <Button 
                  onClick={requestContact}
                  disabled={isRequestingContact}
                  className="w-full bg-blue-600 hover:bg-blue-700"
                >
                  {isRequestingContact ? "–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞..." : "üì± –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"}
                </Button>
              ) : (
                <Button 
                  onClick={handleConfirmAuth}
                  className="w-full bg-green-600 hover:bg-green-700"
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                </Button>
              )}
              
              <Button 
                onClick={handleCancel}
                variant="outline"
                className="w-full"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
            <div className="text-xs text-gray-500 text-center">
              <p>üîí –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã</p>
              <p>üì± –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default TelegramContactAuthView;
